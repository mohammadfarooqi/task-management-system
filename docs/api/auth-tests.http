### Variables
@baseUrl = http://localhost:3000/api
@contentType = application/json

### IMPORTANT: Authentication has been updated to use HttpOnly cookies
### When using a REST client that supports cookies (like VS Code REST Client):
### 1. Login first - this will set the accessToken cookie
### 2. Subsequent requests will automatically include the cookie
### If your client doesn't support cookies, the API still accepts Bearer tokens as fallback

### Login as SYSTEM ADMIN (platform administrator)
POST {{baseUrl}}/auth/login
Content-Type: {{contentType}}

{
  "email": "admin@system.com",
  "password": "password123"
}

### Login as OWNER (full org access)
POST {{baseUrl}}/auth/login
Content-Type: {{contentType}}

{
  "email": "owner@techcorp.com",
  "password": "password123"
}

### Login as ADMIN (can create/manage tasks)
POST {{baseUrl}}/auth/login
Content-Type: {{contentType}}

{
  "email": "admin@techcorp.com",
  "password": "password123"
}

### Login as VIEWER (read-only access)
POST {{baseUrl}}/auth/login
Content-Type: {{contentType}}

{
  "email": "viewer@techcorp.com",
  "password": "password123"
}

### Test protected route with any user
### Note: After login, the cookie will be automatically sent
GET {{baseUrl}}/auth/profile

### Login with wrong password (should fail)
POST {{baseUrl}}/auth/login
Content-Type: {{contentType}}

{
  "email": "admin@techcorp.com",
  "password": "wrongpassword"
}

### Login with non-existent user (should fail)
POST {{baseUrl}}/auth/login
Content-Type: {{contentType}}

{
  "email": "nonexistent@example.com",
  "password": "password123"
}

### Logout (clears the HttpOnly cookie)
POST {{baseUrl}}/auth/logout